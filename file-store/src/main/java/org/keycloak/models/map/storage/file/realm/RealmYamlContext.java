/*
 * Copyright 2022 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.keycloak.models.map.storage.file.realm;

import java.util.HashMap;
import org.keycloak.models.map.storage.file.AttributesLikeYamlContext;
import org.keycloak.models.map.common.EntityField;
import org.keycloak.models.map.realm.MapRealmEntity;
import org.keycloak.models.map.realm.MapRealmEntityFields;
import java.util.Map;
import org.keycloak.models.map.storage.file.YamlContext;
import org.keycloak.models.map.storage.file.MapEntityYamlContext;
import org.keycloak.models.map.storage.file.entity.shortcut.FileRealmBrowserHeaders;
import org.keycloak.models.map.storage.file.entity.shortcut.FileRealmKeys.KeysYamlContext;
import java.util.function.Supplier;


/**
 *
 * @author hmlnarik
 */
public class RealmYamlContext extends MapEntityYamlContext<MapRealmEntity> {

    private static final Map<String, EntityField<? super MapRealmEntity>> NAME_TO_ENTITY_FIELD = fieldsToEntityField(MapRealmEntity.class);
    private static final Map<String, Supplier<? extends YamlContext<?>>> CONTEXT_CREATORS = fieldsToContextCreators(MapRealmEntity.class);
    private static final Map<String, Supplier<? extends DefaultMapContext>> ATTRIBUTE_CONTEXT_CREATORS = new HashMap<>();

    static {
        CONTEXT_CREATORS.put(MapRealmEntityFields.COMPONENTS.getNameCamelCase(), ComponentsYamlContext::new);

        // To-be-generated by @Shortcut(name="displayName", key="displayName")
//        CONTEXT_CREATORS.put("displayName", () -> AttributesLikeYamlContext.singletonAttributesMap("displayName"));
//        NAME_TO_ENTITY_FIELD.put("displayName", MapRealmEntityFields.ATTRIBUTES);

        // To-be-generated by @Shortcut(name="browserHeaders", processor=FileRealmBrowserHeaders.class)
//        CONTEXT_CREATORS.put("browserHeaders", FileRealmBrowserHeaders::produceYamlContext);
//        NAME_TO_ENTITY_FIELD.put("browserHeaders", MapRealmEntityFields.ATTRIBUTES);

        // To-be-generated by @Shortcut(name="keys", processor=FileRealmBrowserHeaders.class)
        CONTEXT_CREATORS.put("keys", KeysYamlContext::new);
        NAME_TO_ENTITY_FIELD.put("keys", MapRealmEntityFields.COMPONENTS);

        ATTRIBUTE_CONTEXT_CREATORS.put("actionTokenGeneratedByUserLifespan", () -> AttributesLikeYamlContext.prefixed("actionTokenGeneratedByUserLifespan."));
        NAME_TO_ENTITY_FIELD.put("actionTokenGeneratedByUserLifespan", MapRealmEntityFields.ATTRIBUTES);

        ATTRIBUTE_CONTEXT_CREATORS.put("defaultSignatureAlgorithm", () -> AttributesLikeYamlContext.singletonAttributesMap("defaultSignatureAlgorithm"));
        NAME_TO_ENTITY_FIELD.put("defaultSignatureAlgorithm", MapRealmEntityFields.ATTRIBUTES);

        CONTEXT_CREATORS.put(MapRealmEntityFields.ATTRIBUTES.getNameCamelCase(), () -> new RealmAttributesYamlContext(ATTRIBUTE_CONTEXT_CREATORS));
        CONTEXT_CREATORS.put("actionTokenGeneratedByUserLifespan", () -> new RealmAttributesYamlContext(ATTRIBUTE_CONTEXT_CREATORS));
        CONTEXT_CREATORS.put("defaultSignatureAlgorithm", () -> new RealmAttributesYamlContext(ATTRIBUTE_CONTEXT_CREATORS));
    }

    public RealmYamlContext() {
        super(MapRealmEntity.class, NAME_TO_ENTITY_FIELD, CONTEXT_CREATORS);
    }


}
