/*
 * Copyright 2022 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.keycloak.models.map.storage.file;

import org.keycloak.models.map.common.AbstractEntity;
import org.keycloak.models.map.common.AutogeneratedClasses;
import org.keycloak.models.map.common.DeepCloner;
import org.keycloak.models.map.common.EntityField;
import org.keycloak.models.map.role.MapRoleEntityFields;
import org.keycloak.models.map.storage.file.writer.WritingMechanism;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.jboss.logging.Logger;
import org.keycloak.models.map.common.UndefinedValuesUtils;

/**
 * {@link YamlContext} which handles any entity accompanied with {@link EntityField} field getters and setters,
 * namely {@code Map*Entity} classes.
 * @author hmlnarik
 */
public class MapEntityYamlContext<T> implements YamlContext<T> {

    private static final Logger LOG = Logger.getLogger(MapEntityYamlContext.class);
    
    private final Map<String, EntityField<? super T>> nameToEntityField;
    private final Map<String, Supplier<? extends YamlContext<?>>> contextCreators;

    protected final T result;

    public MapEntityYamlContext(
      Class<T> clazz,
      Map<String, EntityField<? super T>> nameToEntityField,
      Map<String, Supplier<? extends YamlContext<?>>> contextCreators) {
        this.result = (T) AutogeneratedClasses.CONSTRUCTORS_DC.get(clazz).apply(DeepCloner.DUMB_CLONER);    // TODO: Introduce support in DeepCloner
        this.nameToEntityField = nameToEntityField;
        this.contextCreators = contextCreators;
    }

    public MapEntityYamlContext(Class<T> clazz) {
        this.result = (T) AutogeneratedClasses.CONSTRUCTORS_DC.get(clazz).apply(DeepCloner.DUMB_CLONER);    // TODO: Introduce support in DeepCloner
        this.nameToEntityField = fieldsToEntityField(clazz);
        this.contextCreators = fieldsToContextCreators(clazz);
    }

    protected static <T> Map<String, Supplier<? extends YamlContext<?>>> fieldsToContextCreators(Class<T> type) {
        EntityField<? super T>[] efs = (EntityField<? super T>[]) AutogeneratedClasses.ENTITY_FIELDS.get(type);    // TODO: Introduce support in DeepCloner
        if (efs == null) {
            return Collections.emptyMap();
        }

        Map<String, Supplier<? extends YamlContext<?>>> res = new HashMap<>();

        for (EntityField<? super T> ef : efs) {
            Supplier<? extends YamlContext<?>> cc = getDefaultContextCreator(ef);
            if (cc != null) {
                res.put(ef.getNameCamelCase(), cc);
            }
        }
        return res;
    }

    private static <T> Supplier<? extends YamlContext<?>> getDefaultContextCreator(EntityField<? super T> ef) {
        final Class<?> collectionElementClass = ef.getCollectionElementClass();
        if (collectionElementClass != Void.class) {
            if (AutogeneratedClasses.ENTITY_FIELDS.containsKey(collectionElementClass)) {
                return () -> new MapEntitySequenceYamlContext<>(collectionElementClass);
            }
        }

        final Class<?> mapValueClass = ef.getMapValueClass();
        if (mapValueClass != Void.class) {
            if (AutogeneratedClasses.ENTITY_FIELDS.containsKey(mapValueClass)) {
                return () -> new MapEntityMappingYamlContext<>(mapValueClass);
            } else if (ATTRIBUTES_NAME.equals(ef.getName())) {
                return AttributesLikeYamlContext::new;
            }
        }

        return null;
    }

    protected static final String ATTRIBUTES_NAME = MapRoleEntityFields.ATTRIBUTES.getName();

    public static <T> Map<String, EntityField<? super T>> fieldsToEntityField(Class<T> type) {
        EntityField<? super T>[] efs = (EntityField<? super T>[]) AutogeneratedClasses.ENTITY_FIELDS.get(type);    // TODO: Introduce support in DeepCloner
        return efs == null ? Collections.emptyMap() :
          Stream.of(efs).collect(Collectors.toMap(EntityField::getNameCamelCase, Function.identity()));
    }

    public static <T> boolean setEntityField(T result, EntityField<? super T> ef, Object value) {
        if (ef == null) {
            return false;
        }

        if (ef.getCollectionElementClass() != Void.class && value instanceof Collection) {
            ((Collection) value).forEach(v -> ef.collectionAdd(result, v));
        } else if (ef.getMapKeyClass() != Void.class && value instanceof Map) {
            ((Map) value).forEach((k, v) -> ef.mapPut(result, k, v));
        } else {
            final Object origValue = ef.get(result);
            if (origValue != null) {
                LOG.warnf("Overwriting value of %s field", ef.getNameCamelCase());
            }
            ef.set(result, value);
        }
        return true;
    }

    @Override
    public void add(String name, Object value) {
        EntityField<? super T> ef = nameToEntityField.get(name);

        if (! setEntityField(result, ef, value)) {
            LOG.warnf("Ignoring field %s", name);
        }
    }

    @Override
    public T getResult() {
        return this.result;
    }

    @Override
    public YamlContext<?> getContext(String nameOfSubcontext) {
        Supplier<? extends YamlContext<?>> cc = contextCreators.get(nameOfSubcontext);
        if (cc != null) {
            return cc.get();
        }
        EntityField<?> ef = nameToEntityField.get(nameOfSubcontext);
        if (ef != null) {
            if (ef.getCollectionElementClass() != Void.class) {
                return new DefaultListContext();
            } else if (ef.getMapValueClass() != Void.class) {
                return new DefaultMapContext();
            }
            return new DefaultObjectContext();
        }
        LOG.warnf("No special context set for field %s", nameOfSubcontext);
        return null;
    }

    @Override
    public void writeValue(T entity, WritingMechanism mech, Runnable preTask) {
        if (UndefinedValuesUtils.isUndefined(entity)) return;
        preTask.run();
        mech.startMapping();
        mech.addScalar("schemaVersion");
        mech.addScalar(1);
        TreeSet<String> contextNames = new TreeSet<>(nameToEntityField.keySet());
        contextNames.addAll(contextCreators.keySet());

        // in case there are multiple context names with the same entity fields, e.g. Prefixed attribute
        // we need to check whether we've already visited the field
        List<EntityField<T>> visited = new LinkedList<>();

        for (String contextName : contextNames) {
            EntityField<T> ef = (EntityField<T>) nameToEntityField.get(contextName);
            if (ef != null) {
                if (!ef.getNameCamelCase().equals("id") && !ef.getNameCamelCase().equals("realmId")) {
                    Object fieldVal = ef.get(entity);
                    if (fieldVal != null) {

                        YamlContext context = getContext(contextName);

                        if (visited.contains(ef)) continue;

                        context.writeValue(fieldVal, mech, () -> {
                            mech.addScalar(contextName);
                        });
                        visited.add(ef);
                    }
                }
            }
        }
        mech.endMapping();
    }

    public static class MapEntitySequenceYamlContext<T> extends DefaultListContext {

        private final Class<T> collectionElementClass;

        public MapEntitySequenceYamlContext(Class<T> collectionElementClass) {
            this.collectionElementClass = collectionElementClass;
        }

        @Override
        public <ST> YamlContext<ST> getContext(String nameOfSubcontext) {
            return (YamlContext<ST>) new MapEntityYamlContext<>(collectionElementClass);
        }

        @Override
        public void add(String name, Object value) {
            if (value instanceof AbstractEntity) {
                ((AbstractEntity) value).setId(name);
                add(value);
            } else {
                throw new IllegalArgumentException("Sequence expected, mapping with " + name + " key found instead.");
            }
        }
    }

    public static class MapEntityMappingYamlContext<T> extends DefaultMapContext {

        private final Class<T> mapValueClass;

        public MapEntityMappingYamlContext(Class<T> mapValueClass) {
            this.mapValueClass = mapValueClass;
        }

        @Override
        public YamlContext<?> getContext(String nameOfSubcontext) {
            return new MapEntityYamlContext<>(mapValueClass);
        }
    }

}
